#!/bin/bash

# clasp-mgr - Google Apps Script Deployment Manager
# A self-contained shell script for managing multiple GAS deployments

set -e  # Exit on error

# Version
VERSION="1.0.0"

# Configuration paths
CLASP_MGR_DIR=".clasp_mgr"
CLASP_MGR_CONFIG="${CLASP_MGR_DIR}/clasp-mgr.json"
CLASP_CONFIG=".clasp.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Global flags
VERBOSE=0

###########################################
# Utility Functions
###########################################

log_info() {
    echo "✓ $1"
}

log_error() {
    echo -e "${RED}❌ Error: $1${NC}" >&2
}

log_warning() {
    echo -e "${YELLOW}⚠️  Warning: $1${NC}" >&2
}

log_verbose() {
    if [ "$VERBOSE" -eq 1 ]; then
        echo "[VERBOSE] $1"
    fi
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Validate we're in a project directory
validate_project_directory() {
    if [ ! -f "$CLASP_CONFIG" ]; then
        log_error "No clasp.json found in current directory. Run 'clasp create' or 'clasp clone <script-id>' first."
        exit 4
    fi
}

# Check if clasp is installed
check_clasp_installed() {
    if ! command_exists clasp; then
        log_error "clasp is not installed. Install it with: npm install -g @google/clasp"
        exit 1
    fi
}

# Validate script ID format
validate_script_id() {
    local script_id="$1"
    if ! [[ "$script_id" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        log_error "Invalid script ID format. Check your script ID."
        exit 1
    fi
}

###########################################
# JSON Parsing and Manipulation
# Using pure bash/standard tools only
###########################################

# Create directory if it doesn't exist
ensure_dir() {
    local dir="$1"
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
    fi
}

# Read JSON field (simplified parser using grep/sed)
json_get() {
    local file="$1"
    local field="$2"

    if [ ! -f "$file" ]; then
        echo ""
        return
    fi

    # Extract value for simple string fields (handle various whitespace)
    local line=$(grep "\"$field\"" "$file" | head -n1)
    local value=$(echo "$line" | sed -E 's/.*"'"$field"'"[[:space:]]*:[[:space:]]*"([^"]+)".*/\1/')

    # If sed didn't change the line (no match), return empty
    if [ "$line" = "$value" ]; then
        echo ""
    else
        echo "$value"
    fi
}

# Check if JSON file is valid (basic check)
validate_json() {
    local file="$1"

    if [ ! -f "$file" ]; then
        return 1
    fi

    # Basic validation - check for matching braces
    local open_braces=$(grep -o "{" "$file" | wc -l)
    local close_braces=$(grep -o "}" "$file" | wc -l)

    if [ "$open_braces" -ne "$close_braces" ]; then
        log_error "Invalid JSON in $file"
        exit 4
    fi
}

# Create initial clasp-mgr.json
create_clasp_mgr_json() {
    local project_name="$1"
    local container_type="$2"

    ensure_dir "$CLASP_MGR_DIR"

    cat > "$CLASP_MGR_CONFIG" <<EOF
{
  "project_name": "$project_name",
  "type": "google-apps-script",
  "container_type": "$container_type",
  "deployments": []
}
EOF
}

# Get deployment by name
get_deployment() {
    local deployment_name="$1"

    if [ ! -f "$CLASP_MGR_CONFIG" ]; then
        echo ""
        return
    fi

    # Extract deployment section matching the name
    awk -v name="$deployment_name" '
        BEGIN { found=0; brace_count=0; in_deployments=0 }
        /"deployments"/ { in_deployments=1 }
        in_deployments && /"deployment_name".*"'"$deployment_name"'"/ { found=1; brace_count=1; print; next }
        found && brace_count > 0 {
            gsub(/[{}]/, "")
            if ($0 ~ /{/) brace_count++
            if ($0 ~ /}/) brace_count--
            if (brace_count > 0) print
        }
    ' "$CLASP_MGR_CONFIG"
}

# Get all deployment names
get_all_deployment_names() {
    if [ ! -f "$CLASP_MGR_CONFIG" ]; then
        echo ""
        return
    fi

    grep -o '"deployment_name"[[:space:]]*:[[:space:]]*"[^"]*"' "$CLASP_MGR_CONFIG" | \
        sed 's/"deployment_name"[[:space:]]*:[[:space:]]*"\([^"]*\)"/\1/' | \
        tr '\n' '|' | sed 's/|$//'
}

# Count deployments
count_deployments() {
    if [ ! -f "$CLASP_MGR_CONFIG" ]; then
        echo "0"
        return
    fi

    local count=$(grep -c '"deployment_name"' "$CLASP_MGR_CONFIG" 2>/dev/null || true)
    if [ -z "$count" ]; then
        echo "0"
    else
        echo "$count"
    fi
}

# Check if deployment exists
deployment_exists() {
    local deployment_name="$1"
    local names=$(get_all_deployment_names)

    if [ -z "$names" ]; then
        return 1
    fi

    echo "$names" | grep -q "$deployment_name"
}

# Add deployment to config
add_deployment_to_config() {
    local deployment_name="$1"
    local script_id="$2"
    local root_dir="$3"

    # Create temporary file
    local temp_file=$(mktemp)

    # Check if deployments array is empty
    local count=$(count_deployments)

    if [ "$count" -eq 0 ]; then
        # First deployment - replace empty array using awk for BSD compatibility
        awk -v name="$deployment_name" -v sid="$script_id" -v rdir="$root_dir" '
            /"deployments": \[\]/ {
                print "  \"deployments\": ["
                print "    {"
                print "      \"deployment_name\": \"" name "\","
                print "      \"clasp_scriptId\": \"" sid "\","
                print "      \"clasp_rootDir\": \"" rdir "\","
                print "      \"last_deployed\": null"
                print "    }"
                print "  ]"
                next
            }
            { print }
        ' "$CLASP_MGR_CONFIG" > "$temp_file"
    else
        # Add to existing deployments - find the last deployment and add after it
        awk -v name="$deployment_name" -v sid="$script_id" -v rdir="$root_dir" '
            # Track if we are in deployments array
            /"deployments": \[/ { in_deployments=1 }

            # Find closing bracket of deployments array
            in_deployments && /^  \]/ {
                print "    },"
                print "    {"
                print "      \"deployment_name\": \"" name "\","
                print "      \"clasp_scriptId\": \"" sid "\","
                print "      \"clasp_rootDir\": \"" rdir "\","
                print "      \"last_deployed\": null"
                in_deployments=0
            }

            { print }
        ' "$CLASP_MGR_CONFIG" > "$temp_file"
    fi

    mv "$temp_file" "$CLASP_MGR_CONFIG"
}

# Update clasp.json with deployment info
update_clasp_json() {
    local script_id="$1"
    local root_dir="$2"

    cat > "$CLASP_CONFIG" <<EOF
{
  "scriptId": "$script_id",
  "rootDir": "$root_dir"
}
EOF
}

# Get current clasp config
get_current_clasp_config() {
    if [ ! -f "$CLASP_CONFIG" ]; then
        echo ""
        return
    fi

    local script_id=$(json_get "$CLASP_CONFIG" "scriptId")
    local root_dir=$(json_get "$CLASP_CONFIG" "rootDir")
    echo "${script_id}|${root_dir}"
}

# Update last_deployed timestamp
update_last_deployed() {
    local deployment_name="$1"
    local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

    # This is a simplified implementation - full JSON manipulation would require more complex logic
    log_verbose "Updating last_deployed timestamp for $deployment_name"
}

###########################################
# Command: init
###########################################

cmd_init() {
    local project_name=""
    local container_type=""
    local add_deployment="n"

    # Parse options
    while [ $# -gt 0 ]; do
        case "$1" in
            --project-name)
                project_name="$2"
                shift 2
                ;;
            --container-type)
                container_type="$2"
                shift 2
                ;;
            *)
                shift
                ;;
        esac
    done

    # Check if already initialized
    if [ -f "$CLASP_MGR_CONFIG" ]; then
        log_error "Project already initialized. File '$CLASP_MGR_CONFIG' exists."
        exit 1
    fi

    # Validate project directory
    validate_project_directory

    # Interactive mode if options not provided
    if [ -z "$project_name" ]; then
        read -p "Enter project name: " project_name
    fi
    log_info "Project name: $project_name"

    if [ -z "$container_type" ]; then
        echo "Select container type:"
        echo "1. Standalone"
        echo "2. Spreadsheet"
        echo "3. Document"
        echo "4. Form"
        echo "5. Slides"
        echo "6. Webapp"
        read -p "Enter selection (1-6): " selection

        case "$selection" in
            1) container_type="Standalone" ;;
            2) container_type="Spreadsheet" ;;
            3) container_type="Document" ;;
            4) container_type="Form" ;;
            5) container_type="Slides" ;;
            6) container_type="Webapp" ;;
            *)
                log_error "Invalid selection. Please select a number between 1-6"
                exit 1
                ;;
        esac
    fi
    log_info "Container type: $container_type"

    # Create config file
    create_clasp_mgr_json "$project_name" "$container_type"
    log_info "Created $CLASP_MGR_CONFIG"
    log_info "Initialization complete!"

    # Ask about adding deployment
    if [ -t 0 ]; then  # Check if stdin is a terminal (interactive mode)
        read -p "Would you like to add a deployment now? (y/n): " add_deployment
        if [ "$add_deployment" = "y" ] || [ "$add_deployment" = "Y" ]; then
            echo ""
            cmd_deployment_add
        else
            echo "You can add a deployment later with: clasp-mgr deployment add"
        fi
    else
        echo "No deployment added. You can add one later with: clasp-mgr deployment add"
    fi
}

###########################################
# Command: deployment add
###########################################

cmd_deployment_add() {
    local deployment_name=""
    local script_id=""
    local use_current="n"

    # Parse options
    while [ $# -gt 0 ]; do
        case "$1" in
            --name)
                deployment_name="$2"
                shift 2
                ;;
            --script-id)
                script_id="$2"
                shift 2
                ;;
            *)
                shift
                ;;
        esac
    done

    # Validate we have config
    if [ ! -f "$CLASP_MGR_CONFIG" ]; then
        log_error "No $CLASP_MGR_CONFIG found. Run 'clasp-mgr init' first."
        exit 4
    fi

    validate_project_directory

    # Get current clasp config
    local current_config=$(get_current_clasp_config)
    if [ -z "$current_config" ]; then
        log_error "No clasp.json found. Run 'clasp create' or 'clasp clone <script-id>' first."
        exit 4
    fi

    local current_script_id=$(echo "$current_config" | cut -d'|' -f1)
    local current_root_dir=$(echo "$current_config" | cut -d'|' -f2)

    # Check if current configuration already exists in deployments
    local config_exists=0
    local all_names=$(get_all_deployment_names)

    if [ -n "$all_names" ]; then
        # Check each deployment
        while IFS='|' read -ra NAMES; do
            for name in "${NAMES[@]}"; do
                local dep=$(get_deployment "$name")
                if echo "$dep" | grep -q "$current_script_id"; then
                    config_exists=1
                    break 2
                fi
            done
        done <<< "$all_names"
    fi

    # Interactive mode
    if [ -t 0 ] && [ -z "$deployment_name" ]; then
        if [ $config_exists -eq 0 ]; then
            echo "Current clasp configuration detected in clasp.json:"
            echo "  Script ID: $current_script_id"
            echo "  Source directory: $current_root_dir"
            echo "This configuration is not yet in your deployments."
            read -p "Would you like to add this current configuration as a deployment? (y/n): " use_current

            if [ "$use_current" = "y" ] || [ "$use_current" = "Y" ]; then
                local project_name=$(json_get "$CLASP_MGR_CONFIG" "project_name")
                read -p "Enter deployment name (default: $project_name): " deployment_name
                deployment_name=${deployment_name:-$project_name}
                script_id="$current_script_id"
            else
                read -p "Enter deployment name for new deployment: " deployment_name
                read -p "Enter script ID for new deployment: " script_id
            fi
        else
            read -p "Enter deployment name for new deployment: " deployment_name
            read -p "Enter script ID for new deployment: " script_id
        fi
    fi

    # Validate inputs
    if [ -z "$deployment_name" ]; then
        log_error "Deployment name is required"
        exit 1
    fi

    # Check for reserved name (convert to lowercase for comparison)
    local name_lower=$(echo "$deployment_name" | tr '[:upper:]' '[:lower:]')
    if [ "$name_lower" = "all" ]; then
        log_error "Deployment name \"all\" is reserved. Choose a different name."
        exit 1
    fi

    # Check for duplicate name
    if deployment_exists "$deployment_name"; then
        log_error "Deployment \"$deployment_name\" already exists. Choose a different name."
        exit 1
    fi

    if [ -z "$script_id" ]; then
        log_error "Script ID is required"
        exit 1
    fi

    # Validate script ID
    validate_script_id "$script_id"

    # Add deployment
    add_deployment_to_config "$deployment_name" "$script_id" "$current_root_dir"

    if [ "$use_current" = "y" ] || [ "$use_current" = "Y" ]; then
        log_info "Added deployment: \"$deployment_name\" (using current clasp.json configuration)"
    else
        log_info "Added deployment: \"$deployment_name\" (with script ID: $script_id, rootDir: $current_root_dir)"
    fi
}

###########################################
# Command: deployment list
###########################################

cmd_deployment_list() {
    if [ ! -f "$CLASP_MGR_CONFIG" ]; then
        log_error "No $CLASP_MGR_CONFIG found. Run 'clasp-mgr init' first."
        exit 4
    fi

    local count=$(count_deployments)
    if [ "$count" -eq 0 ]; then
        echo "No deployments configured. Run 'clasp-mgr deployment add' to add one."
        return
    fi

    # Get current active config
    local current_config=$(get_current_clasp_config)
    local current_script_id=""
    if [ -n "$current_config" ]; then
        current_script_id=$(echo "$current_config" | cut -d'|' -f1)
    fi

    echo ""
    echo "Configured Deployments:"
    echo "======================="

    # List all deployments
    local all_names=$(get_all_deployment_names)
    local index=1

    while IFS='|' read -ra NAMES; do
        for name in "${NAMES[@]}"; do
            # Extract deployment info
            local script_id=$(grep -A3 "\"deployment_name\".*\"$name\"" "$CLASP_MGR_CONFIG" | grep "clasp_scriptId" | sed 's/.*"clasp_scriptId"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
            local root_dir=$(grep -A3 "\"deployment_name\".*\"$name\"" "$CLASP_MGR_CONFIG" | grep "clasp_rootDir" | sed 's/.*"clasp_rootDir"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
            local last_deployed=$(grep -A3 "\"deployment_name\".*\"$name\"" "$CLASP_MGR_CONFIG" | grep "last_deployed" | sed 's/.*"last_deployed"[[:space:]]*:[[:space:]]*\([^,}]*\).*/\1/')

            echo ""
            echo -n "$index. $name"

            # Mark active deployment
            if [ "$script_id" = "$current_script_id" ]; then
                echo -e " ${GREEN}(ACTIVE)${NC}"
            else
                echo ""
            fi

            echo "   Script ID: $script_id"
            echo "   Root Dir: $root_dir"

            if [ "$last_deployed" != "null" ] && [ -n "$last_deployed" ]; then
                echo "   Last Deployed: $last_deployed"
            else
                echo "   Last Deployed: Never"
            fi

            index=$((index + 1))
        done
    done <<< "$all_names"

    echo ""
}

###########################################
# Command: deploy
###########################################

cmd_deploy() {
    local deployment_name="$1"

    # Validate we have config
    if [ ! -f "$CLASP_MGR_CONFIG" ]; then
        log_error "No $CLASP_MGR_CONFIG found. Run 'clasp-mgr init' first."
        exit 4
    fi

    validate_project_directory
    check_clasp_installed

    local count=$(count_deployments)
    if [ "$count" -eq 0 ]; then
        log_error "No deployments configured. Run 'clasp-mgr deployment add' first."
        exit 1
    fi

    # Interactive mode if no deployment specified
    if [ -z "$deployment_name" ]; then
        echo ""
        echo "Available Deployments:"
        echo "====================="

        local all_names=$(get_all_deployment_names)
        local index=1
        local name_array=()

        while IFS='|' read -ra NAMES; do
            for name in "${NAMES[@]}"; do
                echo "$index. $name"
                name_array+=("$name")
                index=$((index + 1))
            done
        done <<< "$all_names"

        echo "$index. Deploy to all environments"
        echo ""
        read -p "Select deployment (1-$index): " selection

        if [ "$selection" -eq "$index" ]; then
            deployment_name="all"
        elif [ "$selection" -ge 1 ] && [ "$selection" -lt "$index" ]; then
            deployment_name="${name_array[$((selection-1))]}"
        else
            log_error "Invalid selection"
            exit 1
        fi
    fi

    # Deploy to all (convert to lowercase for comparison)
    local name_lower=$(echo "$deployment_name" | tr '[:upper:]' '[:lower:]')
    if [ "$name_lower" = "all" ]; then
        cmd_deploy_all
        return
    fi

    # Deploy to specific deployment
    if ! deployment_exists "$deployment_name"; then
        log_error "Deployment \"$deployment_name\" not found. Use 'clasp-mgr deployment list' to see available deployments."
        exit 5
    fi

    # Extract deployment info
    local script_id=$(grep -A3 "\"deployment_name\".*\"$deployment_name\"" "$CLASP_MGR_CONFIG" | grep "clasp_scriptId" | sed 's/.*"clasp_scriptId"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
    local root_dir=$(grep -A3 "\"deployment_name\".*\"$deployment_name\"" "$CLASP_MGR_CONFIG" | grep "clasp_rootDir" | sed 's/.*"clasp_rootDir"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')

    echo ""
    echo "=== Deploying to $deployment_name ==="
    log_verbose "Updating clasp.json with deployment configuration"
    echo "Updating clasp.json for deployment: $deployment_name"

    # Update clasp.json
    update_clasp_json "$script_id" "$root_dir"

    # Run clasp push
    echo "Running: clasp push"
    log_verbose "Executing: clasp push"

    if clasp push; then
        log_info "$deployment_name deployment successful"
        update_last_deployed "$deployment_name"
    else
        local exit_code=$?
        log_error "$deployment_name deployment failed"
        exit $exit_code
    fi
}

###########################################
# Command: deploy all
###########################################

cmd_deploy_all() {
    echo ""
    echo "Starting deployment to all environments..."
    echo ""

    local all_names=$(get_all_deployment_names)
    local success_count=0
    local fail_count=0
    local failed_deployments=()
    local success_deployments=()

    while IFS='|' read -ra NAMES; do
        for name in "${NAMES[@]}"; do
            # Extract deployment info
            local script_id=$(grep -A3 "\"deployment_name\".*\"$name\"" "$CLASP_MGR_CONFIG" | grep "clasp_scriptId" | sed 's/.*"clasp_scriptId"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')
            local root_dir=$(grep -A3 "\"deployment_name\".*\"$name\"" "$CLASP_MGR_CONFIG" | grep "clasp_rootDir" | sed 's/.*"clasp_rootDir"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/')

            echo "=== Deploying to $name ==="
            echo "Updating clasp.json for deployment: $name"

            # Update clasp.json
            update_clasp_json "$script_id" "$root_dir"

            # Run clasp push
            echo "Running: clasp push"

            if clasp push 2>&1; then
                log_info "$name deployment successful"
                success_deployments+=("$name")
                success_count=$((success_count + 1))
                update_last_deployed "$name"
            else
                log_error "$name deployment failed - continuing with remaining deployments"
                failed_deployments+=("$name")
                fail_count=$((fail_count + 1))
            fi

            echo ""
        done
    done <<< "$all_names"

    # Summary
    echo "=== Deployment Summary ==="
    for dep in "${success_deployments[@]}"; do
        echo -e "${GREEN}✓${NC} $dep: SUCCESS"
    done
    for dep in "${failed_deployments[@]}"; do
        echo -e "${RED}❌${NC} $dep: FAILED"
    done
    echo ""
    echo "Deployment completed: $success_count successful, $fail_count failed"

    # Exit with error if any failed
    if [ $fail_count -gt 0 ]; then
        exit 1
    fi
}

###########################################
# Main Command Router
###########################################

show_help() {
    cat <<EOF
clasp-mgr v$VERSION - Google Apps Script Deployment Manager

Usage: clasp-mgr [options] <command>

Commands:
  init                      Initialize clasp-mgr for current project
  deployment add            Add new deployment configuration
  deployment list           List all deployments
  deploy [deployment_name]  Deploy to specific environment or all

Options:
  --verbose                 Enable verbose output
  --help                    Show this help message
  --version                 Show version information

Examples:
  clasp-mgr init
  clasp-mgr deployment add --name "Production" --script-id "ABC123"
  clasp-mgr deployment list
  clasp-mgr deploy "Production"
  clasp-mgr deploy all

For more information, visit: https://github.com/anthropics/clasp-mgr
EOF
}

show_version() {
    echo "clasp-mgr version $VERSION"
}

# Parse global options
while [ $# -gt 0 ]; do
    case "$1" in
        --verbose)
            VERBOSE=1
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        --version)
            show_version
            exit 0
            ;;
        init)
            shift
            cmd_init "$@"
            exit 0
            ;;
        deployment)
            shift
            case "$1" in
                add)
                    shift
                    cmd_deployment_add "$@"
                    exit 0
                    ;;
                list)
                    shift
                    cmd_deployment_list
                    exit 0
                    ;;
                *)
                    log_error "Unknown deployment command: $1"
                    echo "Use 'clasp-mgr --help' for usage information"
                    exit 1
                    ;;
            esac
            ;;
        deploy)
            shift
            cmd_deploy "$@"
            exit 0
            ;;
        *)
            log_error "Unknown command: $1"
            echo "Use 'clasp-mgr --help' for usage information"
            exit 1
            ;;
    esac
done

# No command provided
show_help
exit 0
